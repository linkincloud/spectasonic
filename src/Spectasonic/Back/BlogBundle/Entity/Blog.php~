<?php

namespace Spectasonic\Back\BlogBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Spectasonic\Back\BlogBundle\Entity\Slider;
use Spectasonic\Back\BlogBundle\Entity\BlogCategory;
use Spectasonic\Back\BlogBundle\Entity\BlogComment;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Blog
 *
 * @ORM\Table(name="blog")
 * @ORM\Entity(repositoryClass="Spectasonic\Back\BlogBundle\Repository\BlogRepository")
 * @ORM\HasLifecycleCallbacks()
 * @UniqueEntity(fields="title", message="Une annonce existe déjà avec ce titre.");
 */
class Blog {

    /**
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @ORM\Column(name="date", type="datetime")
     * @Assert\DateTime()
     */
    private $date;

    /**
     * @ORM\Column(name="title", type="string", length=255, unique=true)
     * @Assert\Length(min="10", minMessage = "Votre titre est trop court, vous devez avoir au moins 10 caractères")
     */
    private $title;

    /**
     * @Gedmo\Slug(fields={"title"})
     * @ORM\Column(length=255, unique=true)
     */
    private $slug;

    /**
     * @ORM\ManyToOne(targetEntity="Spectasonic\Front\UserBundle\Entity\User")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
     */
    private $author;

    /**
     * @ORM\Column(name="excerpt", type="string", length=255)
     * @Assert\NotBlank()
     */
    private $excerpt;

    /**
     * @ORM\Column(name="content", type="text")
     * @Assert\NotBlank()
     */
    private $content;

    /**
     * @ORM\Column(name="published", type="boolean")
     */
    private $published = true;

    /**
     * @var string FMElfinderBundle
     * @ORM\Column(name="mainimage", type="string", length=255, nullable=true)
     */
    private $mainimage;

    /**
     * @ORM\ManyToOne(targetEntity="Spectasonic\Back\BlogBundle\Entity\Slider")
     * @ORM\JoinColumn(nullable=true)
     */
    private $slider;

    /**
     * @ORM\Column(name="document", type="string", length=255)
     * @ORM\JoinColumn(nullable=true)
     */
    private $document;

    /**
     * @ORM\ManyToMany(targetEntity="Spectasonic\Back\BlogBundle\Entity\BlogCategory", cascade={"persist"})
     */
    private $categories;

    /**
     * @ORM\OneToMany(targetEntity="Spectasonic\Back\BlogBundle\Entity\BlogComment", mappedBy="blog")
     */
    private $comments; // Notez le « s », une new peut avoir plusieurs commentaires

    /**
     * @ORM\Column(name="updated_at", type="datetime", nullable=true)
     */
    private $updatedAt;

    /**
     * @ORM\Column(name="nb_comments", type="integer")
     */
    private $nbComments = 0;

    /**
     * @ORM\Column(name="page", type="boolean")
     */
    private $page = false;

    public function __construct() {
        $this->date = new \Datetime();
        $this->categories = new ArrayCollection();
        $this->comments = new ArrayCollection();
    }

    /**
     * @return integer
     */
    public function getId() {
        return $this->id;
    }

    /**
     * @param \DateTime $date
     * @return Blog
     */
    public function setDate($date) {
        $this->date = $date;
        return $this;
    }

    /**
     * @return \DateTime
     */
    public function getDate() {
        return $this->date;
    }

    /**
     * @param string $title
     * @return Blog
     */
    public function setTitle($title) {
        $this->title = $title;
        return $this;
    }

    /**
     * @return string
     */
    public function getTitle() {
        return $this->title;
    }

    /**
     * @param string $author
     * @return Blog
     */
    public function setAuthor($author) {
        $this->author = $author;
        return $this;
    }

    /**
     * @return string
     */
    public function getAuthor() {
        return $this->author;
    }

    /**
     * @param string $excerpt
     */
    public function setExcerpt($excerpt) {
        $this->excerpt = $excerpt;
        return $this;
    }

    /**
     * @return string
     */
    public function getExcerpt() {
        return $this->excerpt;
    }

    /**
     * @param string $content
     * @return Blog
     */
    public function setContent($content) {
        $this->content = $content;
        return $this;
    }

    /**
     * @return string
     */
    public function getContent() {
        return $this->content;
    }

    /**
     * @param boolean $published
     * @return Blog
     */
    public function setPublished($published) {
        $this->published = $published;
        return $this;
    }

    /**
     * @return boolean
     */
    public function getPublished() {

        return $this->published;
    }

    public function addCategory(BlogCategory $category) {
        $this->categories[] = $category;

        return $this;
    }

    public function removeCategory(BlogCategory $category) {
        $this->categories->removeElement($category);
    }

    public function getCategories() {

        return $this->categories;
    }

    public function addComment(BlogComment $comment) {
        $this->comments[] = $comment;

        // On lie la new au commentaire
        $comment->setBlog($this);

        return $this;
    }

    public function removeComment(BlogComment $comment) {
        $this->coments->removeElement($comment);

        // Et si notre relation était facultative (nullable=true, ce qui n'est pas notre cas ici attention) :
        // $application->setBlog(null);
    }

    /**
     * @return ArrayCollection
     */
    public function getComments() {
        return $this->comments;
    }

    /**
     * @ORM\PreUpdate
     */
    public function updateDate() {
        $this->setUpdatedAt(new \Datetime());
    }

    public function setUpdatedAt(\Datetime $updatedAt) {
        $this->updatedAt = $updatedAt;
        return $this;
    }

    public function getUpdatedAt() {
        return $this->updatedAt;
    }

    public function increaseComment() {
        $this->nbComments++;
    }

    public function decreaseComments() {
        $this->nbComments--;
    }

    /**
     * Set nbComments
     *
     * @param integer $nbComments
     *
     * @return Blog
     */
    public function setNbComments($nbComments) {
        $this->nbComments = $nbComments;

        return $this;
    }

    /**
     * Get nbComments
     *
     * @return integer
     */
    public function getNbComments() {
        return $this->nbComments;
    }

    /**
     * Set slug
     *
     * @param string $slug
     *
     * @return Blog
     */
    public function setSlug($slug) {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string
     */
    public function getSlug() {
        return $this->slug;
    }

    /**
     * Set page
     *
     * @param boolean $page
     *
     * @return Blog
     */
    public function setPage($page) {
        $this->page = $page;

        return $this;
    }

    /**
     * Get page
     *
     * @return boolean
     */
    public function getPage() {
        return $this->page;
    }

    /**
     * Set mainimage
     *
     * @param string $mainimage
     *
     * @return Blog
     */
    public function setMainimage($mainimage) {
        $this->mainimage = $mainimage;

        return $this;
    }

    /**
     * Get mainimage
     *
     * @return string
     */
    public function getMainimage() {
        return $this->mainimage;
    }

    /**
     * Set document
     *
     * @param string $document
     *
     * @return Blog
     */
    public function setDocument($document) {
        $this->document = $document;

        return $this;
    }

    /**
     * Get document
     *
     * @return string
     */
    public function getDocument() {
        return $this->document;
    }


    /**
     * Set slider
     *
     * @param Slider $slider
     *
     * @return Blog
     */
    public function setSlider(Slider $slider = null)
    {
        $this->slider = $slider;

        return $this;
    }

    /**
     * Get slider
     *
     * @return \Spectasonic\Back\BlogBundle\Entity\Slider
     */
    public function getSlider()
    {
        return $this->slider;
    }
}
