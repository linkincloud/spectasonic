<?php

namespace Spectasonic\Back\ShopManagerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShopProductRepository extends EntityRepository
{
    /**
     * 
     * @return type
     */
    public function getAllProducts() {

        $qb = $this->createQueryBuilder('p');
        
        $qb
                ->join('p.category', 'c')
                ->addSelect('c');
        
        return $qb->getQuery()->getResult();

    }
    
    public function getAllProductsWithCategory(array $categoryNames) {
        $qb = $this->createQueryBuilder('p');

        $qb
                ->join('p.category', 'c')
                ->addSelect('c')

                ->andWhere('p.actived = true');

        $qb->andWhere($qb->expr()->in('c.name', $categoryNames));

        return $qb
                        ->getQuery()
                        ->getResult();
    }
    
    /*
     * Pour afficher dans le front
     * 
     */
    public function myFindOneBySlug($slug) {
        $qb = $this->createQueryBuilder('p');

        $qb
                ->join('p.category', 'c')
                ->addSelect('c')
                ->where('p.slug = :slug')
                ->setParameter('slug', $slug);

        return $qb->getQuery()->getSingleResult();
    }
    
    /*
     * UtilisÃ© pour afficher les 3 derniers articles pour le front pour la page index
     */

    public function getShopFront($limit = 3, array $categoryNames = []) {
        $qb = $this->createQueryBuilder('p');

        if ($categoryNames['category'] != '') {
            $qb
                    ->join('p.category', 'c')
                    ->addSelect('c')
                    ->where('p.actived = true')
                    ->andWhere($qb->expr()->in('c.name', $categoryNames))
                    ->orderBy('p.id', 'DESC')
                    ->setMaxResults($limit);
        } else {
            $qb
                    ->join('p.category', 'c')
                    ->addSelect('c')
                    ->where('p.actived = true')
                    ->orderBy('p.id', 'DESC')
                    ->setMaxResults($limit);
        }

        return $qb
                        ->getQuery()
                        ->getResult();
    }
    
}
